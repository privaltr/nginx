#apiVersion: v1
#kind: Namespace
#metadata:
#  name: app-test-1
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: app-test-1-deploy
#  namespace: app-test-1
#spec:
#  replicas: 1
#  selector:
#    matchLabels: 
#      app: app-test-1
#  template:
#    metadata:
#      labels:
#        app: app-test-1
#    spec:
#      containers:
#      - name: app-test-1
#        image: nginx
#        ports:
#        - name: web
#          containerPort: 80
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: app-test-1-svc
#  namespace: app-test-1
#  labels:
#    app: app-test-1
#spec:
#  type: ClusterIP
#  ports:
#  - name:  http
#    port:  80
#    targetPort: 80
#    protocol: TCP
#  selector:
#    app: app-test-1
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: app-test-1-ingress
#  namespace: app-test-1
#spec:
#  rules:
#  - host: "app-test-1.local-cluster.dev"
#    http:
#      paths:
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: app-test-1-svc 
#            port:
#              number: 80
#---
################
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: app-test-1
#   namespace: default
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: app-test-1
#   template:
#     metadata:
#       labels:
#         app: app-test-1
#     spec:
#       containers:
#         - name: nginx
#           image: nginx:latest
#           ports:
#             - containerPort: 80
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: app-test-1
#   namespace: default
#   labels:
#     app: app-test-1
#     service: app-test-1
# spec:
#   selector:
#     app: app-test-1
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
# #  type: ClusterIP
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: app-test-1-tls-secret
#   namespace: default
#     #  annotations:
#     #    cert-manager.io/issuer: "selfsigned-issuer"
# type: kubernetes.io/tls
# stringData:
#   tls.crt: |
#     -----BEGIN CERTIFICATE-----
#     MIIExjCCAy6gAwIBAgIRAPekcus6v7w8JGhTzB6taIUwDQYJKoZIhvcNAQELBQAw
#     ezEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMSgwJgYDVQQLDB91MUB1
#     MS1TdGFuZGFyZC1QQy1RMzUtSUNIOS0yMDA5MS8wLQYDVQQDDCZta2NlcnQgdTFA
#     dTEtU3RhbmRhcmQtUEMtUTM1LUlDSDktMjAwOTAeFw0yNTAyMDUxODI5MDVaFw0z
#     NTAyMDUxODI5MDVaMHsxHjAcBgNVBAoTFW1rY2VydCBkZXZlbG9wbWVudCBDQTEo
#     MCYGA1UECwwfdTFAdTEtU3RhbmRhcmQtUEMtUTM1LUlDSDktMjAwOTEvMC0GA1UE
#     AwwmbWtjZXJ0IHUxQHUxLVN0YW5kYXJkLVBDLVEzNS1JQ0g5LTIwMDkwggGiMA0G
#     CSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCngHUi2QfJl2057s033HG3yRZsVrT5
#     PxUEb268ga/O/PifiVJ0+EV31lwMAHXtKkTTblabZlb2drTFwtNAlwc1P2jMrlVW
#     2ugAKqwtW02mFNjHU28R5nYqE8KAHTxJ3BPS301X8FSb4fv6PJFKP1K3IswXVJ7l
#     sOMEoolKY/uDRmLeosiGX7EjW53XCrL3asLAr26Vd/vGplLacZb0qC+J4o6Nphoc
#     mSr3O885tbsp2PtoFINen3f3c9hk91oIBMrRbvLuAV+5fTkYRU1dQUjD85a65ljx
#     k0Rqo4/Pfd6ZTWOG20uqE8RAZgP6xXI4yAWn8JAbbrRO3xXv0a3TLj+FLKoHx3mg
#     5/CnMZe5GOg84fA4or6iCu/oguGD9XhW+/CmYfLpNuGz874EjH8BTp6pA7uA27Sb
#     +l3Cpv9X99/JFajyG96z8E8W9HKQvGQKPGAXXibdgStQtvaKAaSy8wDJKr7Vk86W
#     5rhJCRaDTfUkrTfCxjbK0UfUea6mSYSm0l0CAwEAAaNFMEMwDgYDVR0PAQH/BAQD
#     AgIEMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFGF/UKHbt5E33MFZDbZk
#     TzaDfBa/MA0GCSqGSIb3DQEBCwUAA4IBgQAVsOTbefnstUCMfnREzcT0EtNUCgxf
#     YWGBlXOw62lqVHGupzvDCXFb44RgRhclXxHhrsPBrPXL3cnwOjc9g7Yz1rGhXbia
#     oec9vpTTA2YynhJeQ1J69ZK1l3bQ96rfL8OvVMGlUTKTQvBNzFhTkIjrp4pjsmAR
#     6brz1Uc1xqZntVu+upucKzJOY9d0iU2dGa03XBAYDFNm4cRhFQzqg5biraidlrUK
#     qW8Mv2yVUNbTmUMvyqdPAEX4HOrreHWnVFJBoTbjpYM3aFRCgEtkhSHnRtkcb1V+
#     KzvgZ2jvN8l/gwgS/kj1nTA6eupzDE8d9xh+0SKdzMsGvQjZr+hoAHxz2/bbOS6E
#     3sGuwdsncOZIr/rsJQaIPhy+MBDgGquKva0Tew6gUS1kh0/GZO5dPiNJirfje7Kx
#     C3VBwFjg+KTEymYsq0xkXOfNXIZkrP7IVQq6Q8oGLFnEmFmB6Xmo3O1hoXOytuq4
#     3bgfrVslB8FzvQIPaTwqHQ6qDgV3EDhzTWU=
#     -----END CERTIFICATE-----
#   tls.key: |
#     -----BEGIN PRIVATE KEY-----
#     MIIG/QIBADANBgkqhkiG9w0BAQEFAASCBucwggbjAgEAAoIBgQCngHUi2QfJl205
#     7s033HG3yRZsVrT5PxUEb268ga/O/PifiVJ0+EV31lwMAHXtKkTTblabZlb2drTF
#     wtNAlwc1P2jMrlVW2ugAKqwtW02mFNjHU28R5nYqE8KAHTxJ3BPS301X8FSb4fv6
#     PJFKP1K3IswXVJ7lsOMEoolKY/uDRmLeosiGX7EjW53XCrL3asLAr26Vd/vGplLa
#     cZb0qC+J4o6NphocmSr3O885tbsp2PtoFINen3f3c9hk91oIBMrRbvLuAV+5fTkY
#     RU1dQUjD85a65ljxk0Rqo4/Pfd6ZTWOG20uqE8RAZgP6xXI4yAWn8JAbbrRO3xXv
#     0a3TLj+FLKoHx3mg5/CnMZe5GOg84fA4or6iCu/oguGD9XhW+/CmYfLpNuGz874E
#     jH8BTp6pA7uA27Sb+l3Cpv9X99/JFajyG96z8E8W9HKQvGQKPGAXXibdgStQtvaK
#     AaSy8wDJKr7Vk86W5rhJCRaDTfUkrTfCxjbK0UfUea6mSYSm0l0CAwEAAQKCAYEA
#     pxkUQe5mwWoJ8ehT261T2LeHYg7hvWB79A/CVdW+cGyXDnhsxPnEO3eiHer7udwY
#     CyCgz6g5iugDEOJ54o6IB0u5na8wvVPma/wmBZ13Cf7z/20xeZcCPJm3yBziPwCI
#     2i4gN2Eu1s+LkyiG/J3NQ5s4JPIrDhL3dnE7KvYxO9Wk3ltgVgTybsZ/4L3wqbhc
#     juK0G/I1Pwg/0WHN6UY7Hn/gHFke5Xa7kSaeZQDxtR6cN0l3gJbvk/GCZ78GlsdH
#     fIJ1N6DRUE1mGaiP2at2kLh85zBV4KfLK+RNV9cwRv9MvPv57uqQuPFsV8Q+GaJ9
#     l2FQb3p/j+TmdZwOhtv6Lhywo/GIp8devD/L+D3vbkKRcYaP2o3RSa8mNQfhTYFl
#     iaLOANKX/4qZieu00lonfKr1/5Ayf6iARV9QGlPp9ftRYArB1E9gdcN8zx7Fw2Ks
#     9UDtJ8Hfwxe1XBToxo8xAdO0LJeX7/J7GUyA5CQ7+iG4cEYSG0iyVeYR5AFzNeq1
#     AoHBANOwCYX7LIskvuTJi9mdjQEtxc5rDRbaL2cQfj+ZsCdwxVTP68P3joRzpfHZ
#     MfHLb++YwWz8uIi2nOuVDrknJPAJX7IxPxg8sS4fPOjfSJqwFvUz+y858RHuLl5+
#     xdcqPDYIBvsQvsf31yXp7bSu3qpzenVpYc5cSgj0kKyIATxFi8ggl3MjxI5P/Jhp
#     uc0FAUOdCWF1m4gJLZTK6GAvITUBW47RHyxia71Awb2ctbiPidduHqlBSivsxp5G
#     Pq6SfwKBwQDKkJRDuObVZzfWujVOa8g2OZFJx0ZiYJrtA8JwOTp8D0uKEaTTfUqi
#     QXdCM8tJXHNJWtW4+IE7nQsnWaPC+DVogAt3Zco6e0WJK7IivVK61fY1FvY41sSJ
#     UuHj826p1MVGpQBWCUBi6z6S5uBzG1/42k3KvXHPx2cj+we3qFjl84CCjHZrqJ67
#     4/FUXoiicwQQKUb0y5YHit4XYmxCMb5kyqAozYuL+mbuLxOYEyVXwX7Qdhkm1Wue
#     ZEVSJmZLtSMCgcAMnqsCrMWsCeXDd+x5bbYRQuxO8PzXxuwahdYw7nWc9FEfTEHu
#     7dw2MzrKXztmAc3Lh9zIJYzOwaw7MyisixPdp4Fn+x2a0Utyx3P3IhCPAD5uIcow
#     t5CSlBN5mK8ss5zhT7syzn3BKBpQbVC5e89UdAvx4fVtuvzC6emSD42bTT4XETJW
#     L+Sw4z3YzDzCZzD7GeqMP9mk038/JpWR3l1pbopJylfEap2nq6uhJS2EMjJygGMd
#     jgHg+n2gw+lKuPsCgcBsaVKgqB4KyrJM3t3WucKumsLSbK+TyUZBYYi3zTkq2njA
#     TU8czWqbSlRMfzHmcm9VLCNEWuO3hwZIKiaGG5dh9V2tqjHAeOcvUc6F3zOewRKD
#     OWXP58nKASzadhedFz354Cc85Lir+GFF+ADaOiV0J0oJHrkBziO6Uwi/V380ms0F
#     ka1zUwyZXJZ1ZB7Wap4bFCxgqXEDWmQgudFc4AiZIwTysYdlBEAAa/udoWmT/QAl
#     C3/Mk96EKAAdxmVrUWcCgcA6n07SUd2vVXDIrYrMUbBPX5gS+5X+gUxe3oG6mOSJ
#     idCqMAYulL1oNRFK3nZca4gokqNhC1djRAkPjSQB3uEiQWCoZuxcJIEwHdcU1e76
#     veoaAa7FRiX+e/yCKs82ivAIQDV6X653yqRLjpBFoy0eHhNW+ekeZkdsLg42yN8M
#     /bJqRXdajNFqQ8cxep9ZlGmF+p8f9j9ZrC/T4aUp7bC/v5gZ9QZwI3lsMgeRWfa9
#     HI0SKbzPYVu9Qms+fAiLCus=
#     -----END PRIVATE KEY-----
# ---
# apiVersion: projectcontour.io/v1
# kind: HTTPProxy
# metadata:
#   name: app-test-1-proxy
#   namespace: default
# spec:
#   virtualhost:
#     fqdn: app-test-1.local-cluster.dev
#     tls:
#       secretName: app-test-1-tls-secret
#   routes:
#     - conditions:
#         - prefix: /
#       services:
#         - name: app-test-1
#           port: 80
########################
# Root CA Secret
apiVersion: v1
kind: Secret
metadata:
  name: root-cert  # Replace with the name for your root certificate secret
  namespace: app-test-1  # Replace with your namespace
  # annotations:
  #   description: "Root CA for TLS Issuance"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV4akNDQXk2Z0F3SUJBZ0lSQVBla2N1czZ2N3c4SkdoVHpCNnRhSVV3RFFZSktvWklodmNOQVFFTEJRQXcKZXpFZU1Cd0dBMVVFQ2hNVmJXdGpaWEowSUdSbGRtVnNiM0J0Wlc1MElFTkJNU2d3SmdZRFZRUUxEQjkxTVVCMQpNUzFUZEdGdVpHRnlaQzFRUXkxUk16VXRTVU5JT1MweU1EQTVNUzh3TFFZRFZRUUREQ1p0YTJObGNuUWdkVEZBCmRURXRVM1JoYm1SaGNtUXRVRU10VVRNMUxVbERTRGt0TWpBd09UQWVGdzB5TlRBeU1EVXhPREk1TURWYUZ3MHoKTlRBeU1EVXhPREk1TURWYU1Ic3hIakFjQmdOVkJBb1RGVzFyWTJWeWRDQmtaWFpsYkc5d2JXVnVkQ0JEUVRFbwpNQ1lHQTFVRUN3d2ZkVEZBZFRFdFUzUmhibVJoY21RdFVFTXRVVE0xTFVsRFNEa3RNakF3T1RFdk1DMEdBMVVFCkF3d21iV3RqWlhKMElIVXhRSFV4TFZOMFlXNWtZWEprTFZCRExWRXpOUzFKUTBnNUxUSXdNRGt3Z2dHaU1BMEcKQ1NxR1NJYjNEUUVCQVFVQUE0SUJqd0F3Z2dHS0FvSUJnUUNuZ0hVaTJRZkpsMjA1N3MwMzNIRzN5UlpzVnJUNQpQeFVFYjI2OGdhL08vUGlmaVZKMCtFVjMxbHdNQUhYdEtrVFRibGFiWmxiMmRyVEZ3dE5BbHdjMVAyak1ybFZXCjJ1Z0FLcXd0VzAybUZOakhVMjhSNW5ZcUU4S0FIVHhKM0JQUzMwMVg4RlNiNGZ2NlBKRktQMUszSXN3WFZKN2wKc09NRW9vbEtZL3VEUm1MZW9zaUdYN0VqVzUzWENyTDNhc0xBcjI2VmQvdkdwbExhY1piMHFDK0o0bzZOcGhvYwptU3IzTzg4NXRic3AyUHRvRklOZW4zZjNjOWhrOTFvSUJNclJidkx1QVYrNWZUa1lSVTFkUVVqRDg1YTY1bGp4CmswUnFvNC9QZmQ2WlRXT0cyMHVxRThSQVpnUDZ4WEk0eUFXbjhKQWJiclJPM3hYdjBhM1RMaitGTEtvSHgzbWcKNS9Dbk1aZTVHT2c4NGZBNG9yNmlDdS9vZ3VHRDlYaFcrL0NtWWZMcE51R3o4NzRFakg4QlRwNnBBN3VBMjdTYgorbDNDcHY5WDk5L0pGYWp5Rzk2ejhFOFc5SEtRdkdRS1BHQVhYaWJkZ1N0UXR2YUtBYVN5OHdESktyN1ZrODZXCjVyaEpDUmFEVGZVa3JUZkN4amJLMFVmVWVhNm1TWVNtMGwwQ0F3RUFBYU5GTUVNd0RnWURWUjBQQVFIL0JBUUQKQWdJRU1CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdIUVlEVlIwT0JCWUVGR0YvVUtIYnQ1RTMzTUZaRGJaawpUemFEZkJhL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQmdRQVZzT1RiZWZuc3RVQ01mblJFemNUMEV0TlVDZ3hmCllXR0JsWE93NjJscVZIR3VwenZEQ1hGYjQ0UmdSaGNsWHhIaHJzUEJyUFhMM2Nud09qYzlnN1l6MXJHaFhiaWEKb2VjOXZwVFRBMll5bmhKZVExSjY5WksxbDNiUTk2cmZMOE92Vk1HbFVUS1RRdkJOekZoVGtJanJwNHBqc21BUgo2YnJ6MVVjMXhxWm50VnUrdXB1Y0t6Sk9ZOWQwaVUyZEdhMDNYQkFZREZObTRjUmhGUXpxZzViaXJhaWRsclVLCnFXOE12MnlWVU5iVG1VTXZ5cWRQQUVYNEhPcnJlSFduVkZKQm9UYmpwWU0zYUZSQ2dFdGtoU0huUnRrY2IxVisKS3p2Z1oyanZOOGwvZ3dnUy9rajFuVEE2ZXVwekRFOGQ5eGgrMFNLZHpNc0d2UWpacitob0FIeHoyL2JiT1M2RQozc0d1d2RzbmNPWklyL3JzSlFhSVBoeStNQkRnR3F1S3ZhMFRldzZnVVMxa2gwL0daTzVkUGlOSmlyZmplN0t4CkMzVkJ3RmpnK0tURXltWXNxMHhrWE9mTlhJWmtyUDdJVlFxNlE4b0dMRm5FbUZtQjZYbW8zTzFob1hPeXR1cTQKM2JnZnJWc2xCOEZ6dlFJUGFUd3FIUTZxRGdWM0VEaHpUV1U9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUcvUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQnVjd2dnYmpBZ0VBQW9JQmdRQ25nSFVpMlFmSmwyMDUKN3MwMzNIRzN5UlpzVnJUNVB4VUViMjY4Z2EvTy9QaWZpVkowK0VWMzFsd01BSFh0S2tUVGJsYWJabGIyZHJURgp3dE5BbHdjMVAyak1ybFZXMnVnQUtxd3RXMDJtRk5qSFUyOFI1bllxRThLQUhUeEozQlBTMzAxWDhGU2I0ZnY2ClBKRktQMUszSXN3WFZKN2xzT01Fb29sS1kvdURSbUxlb3NpR1g3RWpXNTNYQ3JMM2FzTEFyMjZWZC92R3BsTGEKY1piMHFDK0o0bzZOcGhvY21TcjNPODg1dGJzcDJQdG9GSU5lbjNmM2M5aGs5MW9JQk1yUmJ2THVBVis1ZlRrWQpSVTFkUVVqRDg1YTY1bGp4azBScW80L1BmZDZaVFdPRzIwdXFFOFJBWmdQNnhYSTR5QVduOEpBYmJyUk8zeFh2CjBhM1RMaitGTEtvSHgzbWc1L0NuTVplNUdPZzg0ZkE0b3I2aUN1L29ndUdEOVhoVysvQ21ZZkxwTnVHejg3NEUKakg4QlRwNnBBN3VBMjdTYitsM0NwdjlYOTkvSkZhanlHOTZ6OEU4VzlIS1F2R1FLUEdBWFhpYmRnU3RRdHZhSwpBYVN5OHdESktyN1ZrODZXNXJoSkNSYURUZlVrclRmQ3hqYkswVWZVZWE2bVNZU20wbDBDQXdFQUFRS0NBWUVBCnB4a1VRZTVtd1dvSjhlaFQyNjFUMkxlSFlnN2h2V0I3OUEvQ1ZkVytjR3lYRG5oc3hQbkVPM2VpSGVyN3Vkd1kKQ3lDZ3o2ZzVpdWdERU9KNTRvNklCMHU1bmE4d3ZWUG1hL3dtQloxM0NmN3ovMjB4ZVpjQ1BKbTN5QnppUHdDSQoyaTRnTjJFdTFzK0xreWlHL0ozTlE1czRKUElyRGhMM2RuRTdLdll4TzlXazNsdGdWZ1R5YnNaLzRMM3dxYmhjCmp1SzBHL0kxUHdnLzBXSE42VVk3SG4vZ0hGa2U1WGE3a1NhZVpRRHh0UjZjTjBsM2dKYnZrL0dDWjc4R2xzZEgKZklKMU42RFJVRTFtR2FpUDJhdDJrTGg4NXpCVjRLZkxLK1JOVjljd1J2OU12UHY1N3VxUXVQRnNWOFErR2FKOQpsMkZRYjNwL2orVG1kWndPaHR2NkxoeXdvL0dJcDhkZXZEL0wrRDN2YmtLUmNZYVAybzNSU2E4bU5RZmhUWUZsCmlhTE9BTktYLzRxWmlldTAwbG9uZktyMS81QXlmNmlBUlY5UUdsUHA5ZnRSWUFyQjFFOWdkY044eng3RncyS3MKOVVEdEo4SGZ3eGUxWEJUb3hvOHhBZE8wTEplWDcvSjdHVXlBNUNRNytpRzRjRVlTRzBpeVZlWVI1QUZ6TmVxMQpBb0hCQU5Pd0NZWDdMSXNrdnVUSmk5bWRqUUV0eGM1ckRSYmFMMmNRZmorWnNDZHd4VlRQNjhQM2pvUnpwZkhaCk1mSExiKytZd1d6OHVJaTJuT3VWRHJrbkpQQUpYN0l4UHhnOHNTNGZQT2pmU0pxd0Z2VXoreTg1OFJIdUxsNSsKeGRjcVBEWUlCdnNRdnNmMzF5WHA3YlN1M3FwemVuVnBZYzVjU2dqMGtLeUlBVHhGaThnZ2wzTWp4STVQL0pocAp1YzBGQVVPZENXRjFtNGdKTFpUSzZHQXZJVFVCVzQ3Ukh5eGlhNzFBd2IyY3RiaVBpZGR1SHFsQlNpdnN4cDVHClBxNlNmd0tCd1FES2tKUkR1T2JWWnpmV3VqVk9hOGcyT1pGSngwWmlZSnJ0QThKd09UcDhEMHVLRWFUVGZVcWkKUVhkQ004dEpYSE5KV3RXNCtJRTduUXNuV2FQQytEVm9nQXQzWmNvNmUwV0pLN0lpdlZLNjFmWTFGdlk0MXNTSgpVdUhqODI2cDFNVkdwUUJXQ1VCaTZ6NlM1dUJ6RzEvNDJrM0t2WEhQeDJjait3ZTNxRmpsODRDQ2pIWnJxSjY3CjQvRlVYb2lpY3dRUUtVYjB5NVlIaXQ0WFlteENNYjVreXFBb3pZdUwrbWJ1THhPWUV5Vlh3WDdRZGhrbTFXdWUKWkVWU0ptWkx0U01DZ2NBTW5xc0NyTVdzQ2VYRGQreDViYllSUXV4TzhQelh4dXdhaGRZdzduV2M5RkVmVEVIdQo3ZHcyTXpyS1h6dG1BYzNMaDl6SUpZek93YXc3TXlpc2l4UGRwNEZuK3gyYTBVdHl4M1AzSWhDUEFENXVJY293CnQ1Q1NsQk41bUs4c3M1emhUN3N5em4zQktCcFFiVkM1ZTg5VWRBdng0ZlZ0dXZ6QzZlbVNENDJiVFQ0WEVUSlcKTCtTdzR6M1l6RHpDWnpEN0dlcU1QOW1rMDM4L0pwV1IzbDFwYm9wSnlsZkVhcDJucTZ1aEpTMkVNakp5Z0dNZApqZ0hnK24yZ3crbEt1UHNDZ2NCc2FWS2dxQjRLeXJKTTN0M1d1Y0t1bXNMU2JLK1R5VVpCWVlpM3pUa3EybmpBClRVOGN6V3FiU2xSTWZ6SG1jbTlWTENORVd1TzNod1pJS2lhR0c1ZGg5VjJ0cWpIQWVPY3ZVYzZGM3pPZXdSS0QKT1dYUDU4bktBU3phZGhlZEZ6MzU0Q2M4NUxpcitHRkYrQURhT2lWMEowb0pIcmtCemlPNlV3aS9WMzgwbXMwRgprYTF6VXd5WlhKWjFaQjdXYXA0YkZDeGdxWEVEV21RZ3VkRmM0QWlaSXdUeXNZZGxCRUFBYS91ZG9XbVQvUUFsCkMzL01rOTZFS0FBZHhtVnJVV2NDZ2NBNm4wN1NVZDJ2VlhESXJZck1VYkJQWDVnUys1WCtnVXhlM29HNm1PU0oKaWRDcU1BWXVsTDFvTlJGSzNuWmNhNGdva3FOaEMxZGpSQWtQalNRQjN1RWlRV0NvWnV4Y0pJRXdIZGNVMWU3Ngp2ZW9hQWE3RlJpWCtlL3lDS3M4Mml2QUlRRFY2WDY1M3lxUkxqcEJGb3kwZUhoTlcrZWtlWmtkc0xnNDJ5TjhNCi9iSnFSWGRhak5GcVE4Y3hlcDlabEdtRitwOGY5ajlackMvVDRhVXA3YkMvdjVnWjlRWndJM2xzTWdlUldmYTkKSEkwU0tielBZVnU5UW1zK2ZBaUxDdXM9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0Ku1@u1-Standard-PC-Q35-ICH9-2009"

---
# Issuer
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ca-issuer  # Replace with the name for your issuer
  namespace: app-test-1  # Replace with your namespace
spec:
  ca:
    secretName: root-cert  # This should match the secret name from above

---
# Certificate for the service (httpbin in this case)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: tls-certificate  # Replace with the service name
  namespace: app-test-1  # Replace with your namespace
spec:
  secretName: app-test-1-https-cert  # Replace with the secret name for the TLS certificate
  dnsNames:
    - app-test-1.local-cluster.dev  # Replace with your service's fully qualified domain name
  privateKey:
    rotationPolicy: Always
  issuerRef:
    name: ca-issuer  # This should match the name of your issuer
    kind: Issuer

---
# Service
apiVersion: v1
kind: Service
metadata:
 name: app-test-1-svc # Replace with your service name (e.g., httpbin)
 namespace: app-test-1 # Replace with your namespace
 labels:
   app: app-test-1 # Replace with your service name (e.g., httpbin)
   service: app-test-1 # Replace with your service name (e.g., httpbin)
spec:
  ports:
  - name: http
    port: 8000
    targetPort: 8080
  selector:
    app: app-test-1   # Replace with your service name (e.g., httpbin)

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-test-1 # Replace with your service name (e.g., httpbin)
  namespace: app-test-1 # Replace with your namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-test-1 # Replace with your service name (e.g., httpbin)
      version: v1
  template:
    metadata:
      labels:
        app: app-test-1
        version: v1 # Replace with your service name (e.g., httpbin)
    spec:
      containers:
        - name: nginx # Replace with your service name (e.g., httpbin)
          imagePullPolicy: IfNotPresent
          image: nginx:latest # Replace with your service image (e.g., docker.io/mccutchen/go-httpbin)
          ports:
            - containerPort: 8080

---
# Ingress (HTTPProxy)
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: app-test-1  # Replace with your service name (e.g., httpbin)
  namespace: app-test-1  # Replace with your namespace
spec:
  virtualhost:
    fqdn: app-test-1.local-cluster.dev  # Replace with your service's fully qualified domain name
    tls:
      secretName: app-test-1-https-cert  # This should match the certificate secret name
  routes:
    - conditions:
      - prefix: /
      services:
        - name: app-test-1  # Replace with your service name (e.g., httpbin)
          port: 8000
